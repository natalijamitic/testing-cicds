name: Auto tag & release on merge to development

on:
  pull_request:
    types: [closed]

permissions:
  contents: write  # needed to create tags & releases
  pull-requests: read

concurrency:
  group: release-dev
  cancel-in-progress: false

jobs:
  tag-on-merge:
    if: >
      github.event.pull_request.merged == true &&
      github.event.pull_request.base.ref == 'development'
    runs-on: ubuntu-latest

    steps:
      - name: Derive labels (bump + tenant)
        id: labels
        uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request;
            const labels = (pr.labels || []).map(l => l.name);
            const bump = labels.find(l => l.startsWith('release:')) || '';
            const tenant = labels.find(l => l.startsWith('tenant:')) || '';
            if (!bump || !tenant) core.setFailed(`Missing bump or tenant labels. Got: ${labels.join(', ')}`);
            core.setOutput('bump', bump.replace('release:', ''));   // patch|minor|major|none
            core.setOutput('tenant', tenant.replace('tenant:', '')); // default|csu|both
            core.setOutput('merge_sha', pr.merge_commit_sha);

      - name: Stop if release:none
        if: steps.labels.outputs.bump == 'none'
        run: echo "Release bump is 'none' — skipping tag creation."

      - name: Checkout (fetch all tags)
        if: steps.labels.outputs.bump != 'none'
        uses: actions/checkout@v4
        with:
            fetch-depth: 0

      - name: Fetch tags
        if: steps.labels.outputs.bump != 'none'
        run: git fetch --tags --force --quiet

      - name: Compute next version
        if: steps.labels.outputs.bump != 'none'
        id: semver
        shell: bash
        run: |
          set -euo pipefail
          BUMP="${{ steps.labels.outputs.bump }}"

          # Find latest X.Y.Z across all release/dev/*/* tags
          LATEST=$(git tag -l 'release/dev/*/*' | awk -F'/' '{print $4}' | sort -V | tail -n1)
          if [[ -z "${LATEST}" ]]; then
            LATEST="0.0.0"
          fi

          IFS='.' read -r MA MI PA <<< "${LATEST}"

          case "${BUMP}" in
            patch)  PA=$((PA+1)) ;;
            minor)  MI=$((MI+1)); PA=0 ;;
            major)  MA=$((MA+1)); MI=0; PA=0 ;;
            *) echo "Unknown bump: ${BUMP}"; exit 1 ;;
          esac

          NEXT="${MA}.${MI}.${PA}"
          echo "LATEST=${LATEST}"
          echo "NEXT=${NEXT}"
          echo "next=${NEXT}" >> "$GITHUB_OUTPUT"

      - name: Create tags for target tenant(s)
        if: steps.labels.outputs.bump != 'none'
        uses: actions/github-script@v7
        with:
          script: |
            const next = core.getInput('next', { required: false }) || '${{ steps.semver.outputs.next }}';
            const tenant = '${{ steps.labels.outputs.tenant }}';
            const mergeSha = '${{ steps.labels.outputs.merge_sha }}';
            const owner = context.repo.owner;
            const repo  = context.repo.repo;

            const tagNames = [];
            if (tenant === 'default' || tenant === 'both') tagNames.push(`release/dev/default/${next}`);
            if (tenant === 'csu'     || tenant === 'both') tagNames.push(`release/dev/csu/${next}`);

            async function ensureTag(tag) {
              try {
                // Check if ref exists
                await github.rest.git.getRef({ owner, repo, ref: `tags/${tag}` });
                core.info(`Tag already exists: ${tag} — skipping`);
              } catch (e) {
                // Create it if 404
                if (e.status === 404) {
                  core.info(`Creating tag ${tag} at ${mergeSha}`);
                  await github.rest.git.createRef({
                    owner, repo,
                    ref: `refs/tags/${tag}`,
                    sha: mergeSha
                  });
                } else {
                  throw e;
                }
              }
            }

            for (const tag of tagNames) {
              await ensureTag(tag);
            }

      - name: (Optional) Create GitHub Release (auto notes)
        if: steps.labels.outputs.bump != 'none'
        uses: actions/github-script@v7
        with:
          script: |
            const next = '${{ steps.semver.outputs.next }}';
            // Single canonical release object (not tenant-specific),
            // useful for changelogs; tag it with the default tag for discoverability.
            const tagName = `release/dev/default/${next}`;
            const owner = context.repo.owner;
            const repo  = context.repo.repo;

            try {
              await github.rest.repos.getReleaseByTag({ owner, repo, tag: tagName });
              core.info(`Release for ${tagName} already exists.`);
            } catch (e) {
              if (e.status === 404) {
                core.info(`Creating release ${tagName}`);
                await github.rest.repos.createRelease({
                  owner, repo,
                  tag_name: tagName,
                  name: `dev ${next}`,
                  generate_release_notes: true,
                  draft: false,
                  prerelease: false
                });
              } else {
                throw e;
              }
            }
