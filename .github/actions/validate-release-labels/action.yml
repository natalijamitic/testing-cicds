name: Validate release & tenant labels
description: Parses PR labels (release:* + tenant:*) into bump/tenant info.
inputs:
  enforce:
    description: "Fail if invalid labels (true = PR gate mode)"
    required: false
    default: "false"
outputs:
  skip:
    description: "true if should skip tagging/deployment"
    value: ${{ steps.validate.outputs.skip }}
  bump:
    description: "patch|minor|major|none"
    value: ${{ steps.validate.outputs.bump }}
  tenants:
    description: "CSV of tenants (default,csu)"
    value: ${{ steps.validate.outputs.tenants }}
runs:
  using: "composite"
  steps:
    - id: validate
      uses: actions/github-script@v7
      with:
        script: |
          // initialize outputs so they're never undefined
          core.setOutput('skip', 'true');
          core.setOutput('bump', 'none');
          core.setOutput('tenants', '');

          const enforce = core.getInput('enforce') === 'true';
          const pr = context.payload.pull_request;
          const labels = (pr.labels || []).map(l => l.name);

          // 1) release label(s)
          const rel = labels.filter(l => l.startsWith('release:'));

          // No release label -> skip (allowed default)
          if (rel.length === 0) {
            core.info('No release label -> skip deployment.');
            core.setOutput('skip', 'true');
            core.setOutput('bump', 'none');
            core.setOutput('tenants', '');
            return;
          }

          // Multiple release labels -> error in gate, skip otherwise
          if (rel.length !== 1) {
            const msg = `Exactly one release:* required (patch|minor|major|none). Found: ${rel.join(', ')}`;
            if (enforce) core.setFailed(msg); else core.info(msg);
            core.setOutput('skip', 'true');
            core.setOutput('bump', 'none');
            core.setOutput('tenants', '');
            return;
          }

          const bump = rel[0].replace('release:', ''); // patch|minor|major|none

          // Explicit no-op
          if (bump === 'none') {
            core.info('release:none -> skip deployment.');
            core.setOutput('skip', 'true');
            core.setOutput('bump', 'none');
            core.setOutput('tenants', '');
            return;
          }

          // 2) tenants -> build set âŠ† {default, csu}
          const tenantLabels = labels.filter(l => l.startsWith('tenant:'));
          const set = new Set();
          if (tenantLabels.includes('tenant:both'))   { set.add('default'); set.add('csu'); }
          if (tenantLabels.includes('tenant:default')) set.add('default');
          if (tenantLabels.includes('tenant:csu'))     set.add('csu');

          // Missing tenants when bump is active -> error in gate, skip otherwise
          if (set.size === 0) {
            const msg = 'At least one tenant label required (tenant:default | tenant:csu | tenant:both).';
            if (enforce) core.setFailed(msg); else core.info(msg);
            core.setOutput('skip', 'true');
            core.setOutput('bump', 'none');
            core.setOutput('tenants', '');
            return;
          }

          const tenants = [...set].sort();
          core.info(`bump=${bump}, tenants=[${tenants.join(', ')}]`);
          core.setOutput('skip', 'false');
          core.setOutput('bump', bump);
          core.setOutput('tenants', tenants.join(','));

