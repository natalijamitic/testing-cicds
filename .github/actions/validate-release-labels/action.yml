name: Validate release & tenant labels
description: Parses PR labels (release:* + tenant:*) into bump/tenant info.
inputs:
  enforce:
    description: "Fail if invalid labels (true = PR gate mode)"
    required: false
    default: "false"
outputs:
  skip:
    description: "true if should skip tagging/deployment"
    value: ${{ steps.validate.outputs.skip }}
  bump:
    description: "patch|minor|major|none"
    value: ${{ steps.validate.outputs.bump }}
  tenants:
    description: "CSV of tenants (default,csu)"
    value: ${{ steps.validate.outputs.tenants }}

runs:
  using: "composite"
  steps:
    - id: validate
      uses: actions/github-script@v7
      with:
        script: |
          // default outputs
          core.setOutput('skip','true');
          core.setOutput('bump','none');
          core.setOutput('tenants','');

          const enforce = core.getInput('enforce') === 'true';
          const pr = context.payload.pull_request;
          const labels = (pr?.labels || []).map(l => l.name);

          const fail = (msg) => {
            if (enforce) {
              core.setFailed(msg);
              throw new Error(msg);   // <-- ensure step (and job) fail
            } else {
              core.info(msg);
            }
          };

          // release labels
          const rel = labels.filter(l => l.startsWith('release:'));
          if (rel.length === 0) return;  // skip allowed
          if (rel.length !== 1) return fail(`Exactly one release:* required (patch|minor|major|none). Found: ${rel.join(', ')}`);

          const bump = rel[0].replace('release:', '');
          if (bump === 'none') return;   // skip allowed

          // tenants
          const tenantLabels = labels.filter(l => l.startsWith('tenant:'));
          const set = new Set();
          if (tenantLabels.includes('tenant:both'))   { set.add('default'); set.add('csu'); }
          if (tenantLabels.includes('tenant:default')) set.add('default');
          if (tenantLabels.includes('tenant:csu'))     set.add('csu');

          if (set.size === 0) return fail('At least one tenant label required (tenant:default | tenant:csu | tenant:both).');

          const tenants = [...set].sort();
          core.info(`bump=${bump}, tenants=[${tenants.join(', ')}]`);
          core.setOutput('skip', 'false');
          core.setOutput('bump', bump);
          core.setOutput('tenants', tenants.join(','));

